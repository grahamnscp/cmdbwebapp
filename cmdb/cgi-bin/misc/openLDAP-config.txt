openLDAP Config:

# yum install openldap-servers migrationtools

# slappasswd
{SSHA}xBWUKP670EgCd9k1ynfb5fD5MA1fdEOl

# cd /etc/openldap/slapd.d/cn\=config

# vi olcDatabase\=\{2\}bdb.ldif
:%s/dc=my-domain,dc=com/dc=example,dc=co,dc=uk/g
:wq!

# cat <<'EOF'>> olcDatabase\=\{2\}bdb.ldif
olcRootPW: {SSHA}xBWUKP670EgCd9k1ynfb5fD5MA1fdEOl
olcTLSCertificateFile: /etc/pki/tls/certs/slapdcert.pem
olcTLSCertificateKeyFile: /etc/pki/tls/certs/slapdkey.pem
EOF

# vi olcDatabase\=\{1\}monitor.ldif
:%s/dc=my-domain,dc=com/dc=example,dc=co,dc=uk/g
:wq!

# updatedb

# cat <<'EOF'> /var/lib/ldap/DB-CONFIG
# Only take affect on rebuilding the database environment
 #
 # one 0.25 GB cache
 set_cachesize 0 268435456 1
 
 # Data Directory
 #set_data_dir db
 
 # Transaction Log settings
 set_lg_regionmax 262144
 set_lg_bsize 2097152
 #set_lg_dir logs
 EOF

# chown -R ldap:ldap /var/lib/ldap

# slaptest –u

# service slapd start

# ldapsearch –x –b “dc=example,dc=co,dc=uk”
result: 0 Success
 
# slapcat -b cn=config | grep ^olcRoot
olcRootDN: cn=config
olcRootDN: cn=Manager,dc=example,dc=co,dc=uk
olcRootPW:: e1NTSEF9eEJXVUtQNjcwRWdDZDlrMXluZmI1ZkQ1TUExZmRFT2w=
 

Load the schema:

# cp cn\=\{12\}soe_cmdb.ldif  /etc/openldap/slapd.d/cn\=config/cn\=schema/
# service slapd restart
|
# cat /etc/openldap/slapd.d/cn\=config/cn\=schema/cn\=\{12\}soe_cmdb.ldif

dn: cn={12}soe_cmdb
objectClass: olcSchemaConfig
cn: {12}soe_cmdb
#
olcAttributeTypes: ( 2.5.6.11.1.1
   NAME 'manufacturer'
   DESC 'Server Manufacturer'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseIgnoreMatch
   SUBSTR caseIgnoreSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.2
   NAME 'model'
   DESC 'Server Model'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseIgnoreMatch
   SUBSTR caseIgnoreSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.3
   NAME 'hostName'
   DESC 'Host FQDN'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.4
   NAME 'location'
   DESC 'Server Location'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseIgnoreMatch
   SUBSTR caseIgnoreSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.5
   NAME 'serverRole'
   DESC 'Name of the serverRole object(s) that apply to this server'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.6
   NAME 'serverOwner'
   DESC 'Server organisational owner (department or person)'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseIgnoreMatch
   SUBSTR caseIgnoreSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.7
   NAME 'serverClass'
   DESC 'Class of Server (application type)'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.8
   NAME 'environment'
   DESC 'Puppet Environment, e.g. test, dev, production'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.9
   NAME 'operatingSystem'
   DESC 'e.g. Linux'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseIgnoreMatch
   SUBSTR caseIgnoreSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.10
   NAME 'osVersion'
   DESC 'e.g. RHEL 6 x86_64'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseIgnoreMatch
   SUBSTR caseIgnoreSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.11
   NAME 'virtual'
   DESC 'System is virtualised, Options: TRUE, FALSE'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.7
   EQUALITY booleanMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.12
   NAME 'vCluster'
   DESC 'VMware Cluster'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.13
   NAME 'vDataCentre'
   DESC 'VMware Data Centre'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
# 
olcAttributeTypes: ( 2.5.6.11.1.14
   NAME 'vCores'
   DESC 'Number of virtual CPU Cores'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
   EQUALITY integerMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.15
   NAME 'vSockets'
   DESC 'Number of virtual CPU Sockets'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
   EQUALITY integerMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.16
   NAME 'vMemory'
   DESC 'Amount of memory (GBytes)'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
   EQUALITY integerMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.17
   NAME 'vTemplate'
   DESC 'VMware template'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.18
   NAME 'nameServer'
   SUP ipHostNumber
   DESC 'DNS Name Server IP address' )
#
olcAttributeTypes: ( 2.5.6.11.1.19
   NAME 'timeServer'
   SUP ipHostNumber
   DESC 'NTP Time Server IP address' )
#
olcAttributeTypes: ( 2.5.6.11.1.20
   NAME 'cobblerProfile'
   DESC 'Cobbler kickstart profile to build from'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.21
   NAME 'rhnBaseChannel'
   DESC 'RHN Satellite Base Channel'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.22
   NAME 'rhnChildChannel'
   DESC 'RHN Satellite Child Channel'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.23
   NAME 'rhnActivationKey'
   DESC 'RHN Satellite Activation Key'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.24
   NAME 'deviceAlias'
   DESC 'Alias name for disc device'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseIgnoreMatch
   SUBSTR caseIgnoreSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.25
   NAME 'size'
   DESC 'GBytes'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
   EQUALITY integerMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.26
   NAME 'storageLocation'
   DESC 'VMware Datastore'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.27
   NAME 'interface'
   DESC 'e.g. virtio, IDE, SCSI'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.28
   NAME 'provisioning'
   DESC 'e.g. thin, preallocated'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.29
   NAME 'ifType'
   DESC 'Options: Ethernet, Bridge'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.30
   NAME 'bootProto'
   DESC 'Options: DHCP, None'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.31
   NAME 'onBoot'
   DESC 'Start interfac on boot, Options: TRUE, FALSE'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.7
   EQUALITY booleanMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.32
   NAME 'vLAN'
   DESC 'Device is a VLAN, Options: TRUE, FALSE'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.7
   EQUALITY booleanMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.33
   NAME 'gateway'
   SUP ipHostNumber
   DESC 'Gateway for this network' )
#
olcAttributeTypes: ( 2.5.6.11.1.34
   NAME 'pxeBoot'
   DESC 'Device is the PXE Boot NIC, Options: TRUE, FALSE'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.7
   EQUALITY booleanMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.35
   NAME 'bridge'
   DESC 'Bridge name that this NIC is connected to'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.36
   NAME 'slave'
   DESC 'Device is a bonding slave, Options: TRUE, FALSE'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.7
   EQUALITY booleanMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.37
   NAME 'master'
   DESC 'Name of bond master that this NIC is a member of'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.38
   NAME 'ethtoolOptions'
   DESC 'ethtool options for NIC'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.39
   NAME 'bondingOptions'
   DESC 'Bonding options for bond'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.40
   NAME 'puppetClass'
   DESC 'Puppet Class to run'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.41
   NAME 'softwarePackage'
   DESC 'Individual RPM to install'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.42
   NAME 'vESXHost'
   DESC 'ESX Hostname needed in VMware SDK vmcreate schema'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   EQUALITY caseExactMatch
   SUBSTR caseExactSubstringsMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.43
   NAME 'nicOrder'
   DESC 'NetworkInterface order, need first bridge for VMware SDK vmcreate'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
   EQUALITY integerMatch )
#
olcAttributeTypes: ( 2.5.6.11.1.44
   NAME 'diskOrder'
   DESC 'storageDevice order, need first storageLocation and disk size for VMware SDK vmcreate'
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
   EQUALITY integerMatch )
#
olcObjectClasses: ( 2.5.6.11.2.1
   NAME 'managedServer'
   STRUCTURAL
   MUST ( hostName $ serverRole $ operatingSystem $ osVersion $ virtual $ cobblerProfile $ rhnBaseChannel $ rhnActivationKey $ cn $ vDataCentre $ vCores $ vMemory $ vESXHost )
   MAY ( manufacturer $ model $ location $ serverOwner $ serverClass $ vCluster $ vSockets $ vTemplate $ nameServer $ timeServer $ rhnChildChannel $ environment $ puppetClass $ softwarePackage $ description ) )
#
olcObjectClasses: ( 2.5.6.11.2.2
   NAME 'networkInterface'
   STRUCTURAL
   MUST ( ifType $ onBoot $ cn $ bridge $ ipHostNumber $ ipNetmaskNumber $ nicOrder )
   MAY ( bootProto $ vLAN $ gateway $ pxeBoot $ slave $ master $ ethtoolOptions $ bondingOptions $ description $ macAddress $ gateway ) )
#
olcObjectClasses: ( 2.5.6.11.2.3
   NAME 'storageDevice'
   STRUCTURAL
   MUST ( deviceAlias $ size $ storageLocation $ interface $ cn $ diskOrder )
   MAY ( provisioning $ description ) )
#
olcObjectClasses: ( 2.5.6.11.2.4
   NAME 'serverRole'
   STRUCTURAL
   MUST ( cn $ puppetClass )
   MAY ( softwarePackage $ description ) ) 


Setup the ‘frontend’:

# cat <<'EOF'>> base.ldif
# LDAPv3
# base <dc=example,dc=co,dc=uk> with scope subtree

# example.co.uk
dn: dc=example,dc=co,dc=uk
dc: example
objectClass: top
objectClass: domain

# Directory Administrators, example.co.uk
dn: cn=Directory Administrators,dc=example,dc=co,dc=uk
objectClass: top
objectClass: groupofuniquenames
cn: Directory Administrators
uniqueMember: cn=admin

# Groups, example.co.uk
dn: ou=Groups,dc=example,dc=co,dc=uk
ou: Groups
objectClass: top
objectClass: organizationalunit

# People, example.co.uk
dn: ou=People,dc=example,dc=co,dc=uk
ou: People
objectClass: top
objectClass: organizationalunit

# Servers, example.co.uk
dn: ou=Servers,dc=example,dc=co,dc=uk
ou: Servers
description: Example Org Servers
objectClass: top
objectClass: organizationalUnit

# Server Roles, example.co.uk
dn: ou=Server Roles,dc=example,dc=co,dc=uk
ou: Server Roles
description: Server Roles
objectClass: top
objectClass: organizationalUnit
EOF

# ldapadd -x -W -D “cn=Manager,dc=example,dc=co,dc=uk” -f base.ldif

# ldapsearch -W -D "cn=Manager,dc=example,dc=co,dc=uk" -b "dc=example,dc=co,dc=uk" dn
Enter LDAP Password:
# extended LDIF
#
# LDAPv3
# base <dc=example,dc=co,dc=uk> with scope subtree
# filter: (objectclass=*)
# requesting: dn
#
 
# example.co.uk
dn: dc=example,dc=co,dc=uk
 
# Directory Administrators, example.co.uk
dn: cn=Directory Administrators,dc=example,dc=co,dc=uk
 
# Groups, example.co.uk
dn: ou=Groups,dc=example,dc=co,dc=uk
 
# People, example.co.uk
dn: ou=People,dc=example,dc=co,dc=uk
 
# Servers, example.co.uk
dn: ou=Servers,dc=example,dc=co,dc=uk
 
# Server Roles, example.co.uk
dn: ou=Server Roles,dc=example,dc=co,dc=uk
 


Need to manually populate the serverRole entries:

# cat <<'EOF'> serverRoles.ldif
dn: cn=BaseRole,ou=Server Roles,dc=example,dc=co,dc=uk
objectClass: serverRole
cn: BaseRole
puppetClass: ntp-client
puppetClass: dns-client
description: Basic ServerRole
softwarePackage: Basic ServerRole

dn: cn=IPAClient,ou=Server Roles,dc=example,dc=co,dc=uk
objectClass: serverRole
cn: IPAClient
puppetClass: ipa-client
description: Automatically configure as an ipa client
softwarePackage: none

dn: cn=CISRHEL6,ou=Server Roles,dc=example,dc=co,dc=uk
objectClass: serverRole
cn: CISRHEL6
puppetClass: cis-rhel6
description: CIS for RHEL6
softwarePackage: none

dn: cn=CISRHEL5,ou=Server Roles,dc=example,dc=co,dc=uk
objectClass: serverRole
cn: CISRHEL5
puppetClass: cis-rhel5
description: CIS for RHEL5
softwarePackage: none

dn: cn=OpenSCAP6,ou=Server Roles,dc=example,dc=co,dc=uk
objectClass: serverRole
cn: OpenSCAP6
puppetClass: scap-security-guide

dn: cn=EMCNetworker,ou=Server Roles,dc=example,dc=co,dc=uk
objectClass: serverRole
cn: EMCNetworker
puppetClass: emc-networker

dn: cn=Tripwire,ou=Server Roles,dc=example,dc=co,dc=uk
objectClass: serverRole
cn: Tripwire
puppetClass: tripwire
EOF

# ldapadd -x -W -D “cn=Manager,dc=example,dc=co,dc=uk” -f serverRoles.ldif

